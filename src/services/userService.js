import bcrypt from 'bcrypt';
import User from '../models/User.js';

class UserService {
    /**
     * Cria um novo usu√°rio ap√≥s valida√ß√µes e gera√ß√£o de hash da senha
     * @param {Object} userData - Dados do usu√°rio
     * @returns {Promise<Object>} Usu√°rio criado
     */
    async createUser({ username, email, password }) {
        try {
            console.log('üîß UserService: Iniciando cria√ß√£o de usu√°rio:', { username, email });

            const existingUser = await User.findByEmail(email);
            if (existingUser) {
                throw new Error('Email j√° est√° em uso');
            }

            console.log('üîß UserService: Gerando hash da senha...');
            const passwordHash = await bcrypt.hash(password, 10);
            console.log('üîß UserService: Hash da senha gerado com sucesso');

            const user = await User.create({ username, email, passwordHash });
            return user;
        } catch (error) {
            console.error('‚ùå UserService: Erro ao criar usu√°rio:', error.message);
            throw error;
        }
    }
    /**
     * Busca um usu√°rio pelo email
     * @param {string} email - Email do usu√°rio
     * @returns {Promise<Object|null>} Objeto do usu√°rio ou null
     */
    async getUserByEmail(email) {
        return await User.findByEmail(email);
    }
}

export default UserService; 